import sys
n, *N = map(int, sys.stdin.read().split())
A = [N[0]]      #A : N의 최대 연속합의 값 // A[3] : N[3]원소까지 최대가 되는 연속합. 만약 자기 자신이 누적 연속합 보다 크면 자기 자신
for i in range(1, n) :
    A.append(max(N[i], N[i]+A[i-1]))    #A[i-1]에 자기자신(N[i])을 더한 값 vs 자기자신(N[i]) 값 중 최댓값을 A에 넣음.

print(max(A))

'''처음에는 이중 리스트를 만들어 원소를 차례대로 각각의 연속합을 다 더하고 이중 최댓값을 찾으려고 함
    ex) A[i][j] : N[i]~N[j]까지 더한 값
    그렇게 하다보니 메모리 초과 뜸
    두번째로 리스트를 만들지 않고 변수 x를 만들어 똑같이 연속합을 다 구한 다음
    x보다 큰 경우 x값을 대체 -> 시간초과 뜸 (O(n^2))
    고민하다 도저히 모르겠어서 풀이 참고. O(n)으로 해결 완료!^^

'''